syntax = "proto3";

package logic;

option go_package = "grpc";
//import "github.com/gogo/protobuf/gogoproto/gogo.proto";

service Logic {
    rpc Ping(PingReq) returns(PingReply);
    rpc Close(CloseReq) returns(CloseReply);
    rpc Connect(ConnectReq) returns(ConnectReply);
    rpc DisConnect(DisconnectReq) returns(DisconnectReply);
    rpc Heartbeat(HeartbeatReq) returns (HeartbeatReply);
      // RenewOnline
    rpc RenewOnline(OnlineReq) returns (OnlineReply);
        // Receive
    rpc Receive(ReceiveReq) returns (ReceiveReply);
    	//ServerList
    rpc Nodes(NodesReq) returns (NodesReply);
}

message CloseReply {
}

message CloseReq {
}

message PingReply {
    string Y = 1;
}

message PingReq {
    string Y = 1;
}


message ConnectReq {
 //   option (gogoproto.goproto_stringer) = false;
    string server = 1;
    string cookie = 2;
    bytes token = 3;
}

message ConnectReply {
    int64 mid = 1;
    string key = 2;
    string roomID = 3;
    repeated int32 accepts = 4;
    int64 heartbeat = 5;
}

message DisconnectReq {
    int64 mid = 1;
    string key = 2;
    string server = 3;
}

message DisconnectReply {
    bool has = 1;
}

message HeartbeatReq {
    int64 mid = 1;
    string key = 2;
    string server = 3;
}

message HeartbeatReply {
    string Y = 1;
}

message OnlineReq {
  //  option (gogoproto.goproto_stringer) = false;
    string server = 1;
    map<string, int32> roomCount = 2;
}

message OnlineReply {
//    option (gogoproto.goproto_stringer) = false;
    map<string, int32> allRoomCount = 1;
}

message ReceiveReq {
    int64 mid = 1;
//    connect.Proto proto = 2;
}

message ReceiveReply {
}

message NodesReq {
	string platform = 1;
	string clientIP = 2;
}

message NodesReply {
//	string domain = 1 [(gogoproto.jsontag) = "domain"];
//	int32 tcpPort = 2 [(gogoproto.jsontag) = "tcp_port"];
//	int32 wsPort = 3 [(gogoproto.jsontag) = "ws_port"];
//	int32 wssPort = 4 [(gogoproto.jsontag) = "wss_port"];
//	int32 heartbeat = 5 [(gogoproto.jsontag) = "heartbeat"];
//	repeated string nodes = 6 [(gogoproto.jsontag) = "nodes"];
//	Backoff backoff = 7 [(gogoproto.jsontag) = "backoff"];
//	int32 heartbeatMax = 8 [(gogoproto.jsontag) = "heartbeat_max"];
}

message Backoff {
//	int32	MaxDelay = 1 [(gogoproto.jsontag) = "max_delay"];
//	int32	BaseDelay = 2 [(gogoproto.jsontag) = "base_delay"];
//	float	Factor = 3 [(gogoproto.jsontag) = "factor"];
//	float	Jitter = 4 [(gogoproto.jsontag) = "jitter"];
}